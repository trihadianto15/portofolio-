on:
  workflow_dispatch: {}
  pull_request:
    branches:
    - main
    - master
  push:
    branches:
    - main
    - master
name: Deployment
jobs:
  semgrep:
    name: semgrep/ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep
    steps:
    - uses: actions/checkout@v4
    - run: semgrep ci
  vercel:
    runs-on: ubuntu-latest
    needs: semgrep
    outputs:
      preview_url: ${{ steps.vercel_deploy.outputs['preview-url'] }}
      prod_url: ${{ steps.get_prod.outputs['prod_url'] }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Install dependencies & build
      run: |
        npm i
        npm run build

    - name: Deploy to Vercel
      id: vercel_deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-args: '--prod'
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

    - name: Query Vercel API for latest production URL
      id: get_prod
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        RESPONSE=$(curl -s \
          -H "Authorization: Bearer $VERCEL_TOKEN" \
          "https://api.vercel.com/v9/projects/$PROJECT_ID/domains")
        URL=$(echo "$RESPONSE" | jq -r '.domains[0].name')
        echo "prod_url=https://$URL" >> $GITHUB_OUTPUT
  zap:
    name: OWASP ZAP Baseline Scan
    needs: vercel
    runs-on: ubuntu-latest
    steps:
    - name: Download OWASP ZAP Docker image
      run: docker pull zaproxy/zap-stable

    - name: Run ZAP Baseline Scan against Vercel URL
      run: |
        # generate a unique report name using the current epoch seconds
        TIMESTAMP=$(date +%s)
        REPORT_NAME="zap-report-${TIMESTAMP}.html"
        echo "Report will be saved as: $REPORT_NAME"

        TARGET_URL=${{ needs.vercel.outputs.prod_url }}
        echo "Scanning target: $TARGET_URL"

        # ensure the output directory exists
        mkdir -p "$HOME/zap-reports"
        echo "Report directory: $HOME/zap-reports"

        # run ZAP baseline scan, outputting to the dynamic filename
        docker run --rm \
          --user root \
          -v "$HOME/zap-reports":/zap/wrk \
          zaproxy/zap-stable \
          zap-baseline.py \
          -t "$TARGET_URL" \
          -r "$REPORT_NAME" \
          -I

        # expose the report name for the next step
        echo "REPORT_NAME=${REPORT_NAME}" >> $GITHUB_ENV
        echo "REPORT_LOCATION=$HOME/zap-reports" >> $GITHUB_ENV

    - name: Show which report we'll upload
      run: |
        echo "Uploading report: ${{ env.REPORT_NAME }}"

    - name: Upload ZAP HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: zap-report
        path: ${{ env.REPORT_LOCATION }}/${{ env.REPORT_NAME }}
